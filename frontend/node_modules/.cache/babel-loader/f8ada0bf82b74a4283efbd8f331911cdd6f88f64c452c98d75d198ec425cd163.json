{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api'; // Adjust the URL as needed\n\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include JWT token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle token expiration\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Authentication services\nexport const authService = {\n  login: (username, password) => {\n    return apiClient.post('/auth/login', {\n      username,\n      password\n    });\n  },\n  register: userData => {\n    return apiClient.post('/auth/register', userData);\n  }\n};\n\n// Exam services\nexport const examService = {\n  getAllExams: () => {\n    return apiClient.get('/exams');\n  },\n  getExamById: id => {\n    return apiClient.get(`/exams/${id}`);\n  },\n  createExam: examData => {\n    return apiClient.post('/exams', examData);\n  },\n  deleteExam: id => {\n    return apiClient.delete(`/exams/${id}`);\n  }\n};\n\n// Question services\nexport const questionService = {\n  getQuestionsByExam: examId => {\n    return apiClient.get(`/questions/by-exam/${examId}`);\n  },\n  createQuestion: questionData => {\n    return apiClient.post('/questions', questionData);\n  }\n};\n\n// Result services\nexport const resultService = {\n  submitAnswers: answers => {\n    return apiClient.post('/student/submit', answers);\n  }\n};","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","login","username","password","post","register","userData","examService","getAllExams","get","getExamById","id","createExam","examData","deleteExam","delete","questionService","getQuestionsByExam","examId","createQuestion","questionData","resultService","submitAnswers","answers"],"sources":["C:/Users/PRAJWAL J/Downloads/online-exam-h2-jwt/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api'; // Adjust the URL as needed\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include JWT token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle token expiration\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication services\r\nexport const authService = {\r\n  login: (username, password) => {\r\n    return apiClient.post('/auth/login', { username, password });\r\n  },\r\n  register: (userData) => {\r\n    return apiClient.post('/auth/register', userData);\r\n  },\r\n};\r\n\r\n// Exam services\r\nexport const examService = {\r\n  getAllExams: () => {\r\n    return apiClient.get('/exams');\r\n  },\r\n  getExamById: (id) => {\r\n    return apiClient.get(`/exams/${id}`);\r\n  },\r\n  createExam: (examData) => {\r\n    return apiClient.post('/exams', examData);\r\n  },\r\n  deleteExam: (id) => {\r\n    return apiClient.delete(`/exams/${id}`);\r\n  },\r\n};\r\n\r\n// Question services\r\nexport const questionService = {\r\n  getQuestionsByExam: (examId) => {\r\n    return apiClient.get(`/questions/by-exam/${examId}`);\r\n  },\r\n  createQuestion: (questionData) => {\r\n    return apiClient.post('/questions', questionData);\r\n  },\r\n};\r\n\r\n// Result services\r\nexport const resultService = {\r\n  submitAnswers: (answers) => {\r\n    return apiClient.post('/student/submit', answers);\r\n  },\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,SAAS,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,WAAW,GAAG;EACzBC,KAAK,EAAEA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC7B,OAAOzB,SAAS,CAAC0B,IAAI,CAAC,aAAa,EAAE;MAAEF,QAAQ;MAAEC;IAAS,CAAC,CAAC;EAC9D,CAAC;EACDE,QAAQ,EAAGC,QAAQ,IAAK;IACtB,OAAO5B,SAAS,CAAC0B,IAAI,CAAC,gBAAgB,EAAEE,QAAQ,CAAC;EACnD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG;EACzBC,WAAW,EAAEA,CAAA,KAAM;IACjB,OAAO9B,SAAS,CAAC+B,GAAG,CAAC,QAAQ,CAAC;EAChC,CAAC;EACDC,WAAW,EAAGC,EAAE,IAAK;IACnB,OAAOjC,SAAS,CAAC+B,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;EACtC,CAAC;EACDC,UAAU,EAAGC,QAAQ,IAAK;IACxB,OAAOnC,SAAS,CAAC0B,IAAI,CAAC,QAAQ,EAAES,QAAQ,CAAC;EAC3C,CAAC;EACDC,UAAU,EAAGH,EAAE,IAAK;IAClB,OAAOjC,SAAS,CAACqC,MAAM,CAAC,UAAUJ,EAAE,EAAE,CAAC;EACzC;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,eAAe,GAAG;EAC7BC,kBAAkB,EAAGC,MAAM,IAAK;IAC9B,OAAOxC,SAAS,CAAC+B,GAAG,CAAC,sBAAsBS,MAAM,EAAE,CAAC;EACtD,CAAC;EACDC,cAAc,EAAGC,YAAY,IAAK;IAChC,OAAO1C,SAAS,CAAC0B,IAAI,CAAC,YAAY,EAAEgB,YAAY,CAAC;EACnD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3BC,aAAa,EAAGC,OAAO,IAAK;IAC1B,OAAO7C,SAAS,CAAC0B,IAAI,CAAC,iBAAiB,EAAEmB,OAAO,CAAC;EACnD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}