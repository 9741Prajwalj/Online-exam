{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRAJWAL J\\\\Downloads\\\\online-exam-h2-jwt\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { authService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    if (token) {\n      // Decode token to get user info (simple implementation)\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        setUser({\n          username: payload.sub,\n          role: payload.role\n        });\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        logout();\n      }\n    }\n    setLoading(false);\n  }, [token]);\n  const login = async (username, password) => {\n    try {\n      const response = await authService.login(username, password);\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      setToken(token);\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      setUser({\n        username: payload.sub,\n        role: payload.role\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed'\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await authService.register(userData);\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n      setToken(token);\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      setUser({\n        username: payload.sub,\n        role: payload.role\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n  const value = {\n    user,\n    token,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"6yaUUgx9bt/8SVo6kb7BgPC/qRU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","payload","JSON","parse","atob","split","username","sub","role","error","console","logout","login","password","response","data","setItem","success","_error$response","_error$response$data","message","register","userData","_error$response2","_error$response2$data","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/PRAJWAL J/Downloads/online-exam-h2-jwt/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { authService } from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      // Decode token to get user info (simple implementation)\r\n      try {\r\n        const payload = JSON.parse(atob(token.split('.')[1]));\r\n        setUser({\r\n          username: payload.sub,\r\n          role: payload.role\r\n        });\r\n      } catch (error) {\r\n        console.error('Error decoding token:', error);\r\n        logout();\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, [token]);\r\n\r\n  const login = async (username, password) => {\r\n    try {\r\n      const response = await authService.login(username, password);\r\n      const { token } = response.data;\r\n      \r\n      localStorage.setItem('token', token);\r\n      setToken(token);\r\n      \r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      setUser({\r\n        username: payload.sub,\r\n        role: payload.role\r\n      });\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      return { \r\n        success: false, \r\n        error: error.response?.data?.message || 'Login failed' \r\n      };\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await authService.register(userData);\r\n      const { token } = response.data;\r\n      \r\n      localStorage.setItem('token', token);\r\n      setToken(token);\r\n      \r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      setUser({\r\n        username: payload.sub,\r\n        role: payload.role\r\n      });\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      return { \r\n        success: false, \r\n        error: error.response?.data?.message || 'Registration failed' \r\n      };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setToken(null);\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    token,\r\n    login,\r\n    register,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}